{"ast":null,"code":"// utils/api.js\nimport axios from 'axios';\n\n// Base URL for the backend API\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL if different\n\n// Create an Axios instance with the base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nlet isRefreshing = false;\nlet failedQueue = [];\nconst processQueue = (error, token = null) => {\n  failedQueue.forEach(prom => {\n    if (error) prom.reject(error);else prom.resolve(token);\n  });\n  failedQueue = [];\n};\n\n/**\r\n * Function to set or clear the JWT token in the request headers.\r\n * @param {string|null} token - The JWT token to set, or null to clear it.\r\n */\nexport const setAuthToken = token => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n};\napiClient.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    if (isRefreshing) {\n      return new Promise((resolve, reject) => {\n        failedQueue.push({\n          resolve,\n          reject\n        });\n      }).then(token => {\n        originalRequest.headers['Authorization'] = `Bearer ${token}`;\n        return apiClient(originalRequest);\n      }).catch(err => Promise.reject(err));\n    }\n    originalRequest._retry = true;\n    isRefreshing = true;\n    const refreshToken = localStorage.getItem('refreshToken'); // Retrieve refresh token\n    try {\n      const response = await axios.post(`${API_URL}/auth/refresh-token`, {\n        refreshToken\n      });\n      const {\n        accessToken\n      } = response.data;\n      setAuthToken(accessToken); // Update the access token globally\n      originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\n      processQueue(null, accessToken);\n      return apiClient(originalRequest);\n    } catch (err) {\n      processQueue(err, null);\n      return Promise.reject(err);\n    } finally {\n      isRefreshing = false;\n    }\n  }\n  return Promise.reject(error);\n});\n\n/**\r\n * Auth APIs\r\n */\n// Register a new user\nexport const registerUser = async userData => {\n  const response = await apiClient.post('/auth/register', userData);\n  return response.data;\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  const response = await apiClient.post('/auth/login', credentials);\n  return response.data; // Ensure this includes both `token` and `role`\n};\n\n/**\r\n * Property APIs\r\n */\n// Fetch properties (only accessible by property managers)\nexport const getProperties = async () => {\n  try {\n    const response = await apiClient.get('/properties');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching properties:', error.message);\n    throw error;\n  }\n};\n\n// Create a new property (only accessible by property managers)\nexport const createProperty = async propertyData => {\n  try {\n    const response = await apiClient.post('/properties', propertyData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating property:', error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Resident APIs\r\n */\n// Fetch residents (only accessible by property managers)\nexport const getResidents = async () => {\n  try {\n    const response = await apiClient.get('/residents');\n    return response.data;\n  } catch (error) {\n    console.error(' api::getResidents() - Error fetching residents:', error.message);\n    throw error;\n  }\n};\nexport const getPropertiesByManager = async () => {\n  try {\n    console.log('api::getPropertiesByManager(): Sending request to /properties/manager'); // Debugging line\n    const response = await apiClient.get('/properties/manager');\n    console.log('api::getPropertiesByManager(): Response from backend:', response.data); // Debugging line\n    return response.data;\n  } catch (error) {\n    console.error('api::getPropertiesByManager(): Error fetching properties:', error.message);\n    throw error;\n  }\n};\nexport const getResidentsByProperties = async propertyIds => {\n  try {\n    const response = await apiClient.post('/residents/by-properties', {\n      propertyIds\n    });\n    return response.data;\n  } catch (error) {\n    console.error('api::getResidentsByProperties() - Error fetching residents:', error.message);\n    throw error;\n  }\n};\n\n// Create a new resident (only accessible by property managers)\nexport const createResident = async residentData => {\n  try {\n    console.log('Sending resident data to backend:', residentData); // Debugging line\n    const response = await apiClient.post('/residents/residents', residentData); // Updated endpoint\n    console.log('Response from backend:', response.data); // Debugging line\n    return response.data;\n  } catch (error) {\n    console.error('Error in createResident API call:', error.message); // Debugging line\n    throw error;\n  }\n};\n\n// Get resident's vehicles (only accessible by residents)\nexport const getVehicles = async () => {\n  try {\n    const response = await apiClient.get('/residents/vehicles');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching vehicles:', error.message);\n    throw error;\n  }\n};\n\n// Add a vehicle (only accessible by residents)\nexport const addVehicle = async vehicleData => {\n  try {\n    const response = await apiClient.post('/residents/vehicles', vehicleData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding vehicle:', error.message);\n    throw error;\n  }\n};\n\n// Update a vehicle (only accessible by residents)\nexport const updateVehicle = async (id, updatedData) => {\n  try {\n    const response = await apiClient.put(`/residents/vehicles/${id}`, updatedData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating vehicle:', error.message);\n    throw error;\n  }\n};\n\n// Delete a vehicle (only accessible by residents)\nexport const deleteVehicle = async id => {\n  try {\n    const response = await apiClient.delete(`/residents/vehicles/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting vehicle:', error.message);\n    throw error;\n  }\n};\n\n// Get assigned parking spot (only accessible by residents)\nexport const getParkingSpot = async () => {\n  try {\n    const response = await apiClient.get('/residents/parking-spot');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching parking spot:', error.message);\n    throw error;\n  }\n};\n\n// Update resident profile (only accessible by residents)\nexport const updateProfile = async profileData => {\n  try {\n    const response = await apiClient.put('/residents/profile', profileData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating profile:', error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Guest APIs\r\n */\n// Register a guest\nexport const registerGuest = async guestData => {\n  try {\n    const response = await apiClient.post('/guests/register', guestData);\n    return response.data;\n  } catch (error) {\n    console.error('Error registering guest:', error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Guest Parking Rules APIs\r\n */\n// Configure guest parking rules for a property (only accessible by property managers)\nexport const configureGuestParkingRules = async rulesData => {\n  try {\n    const response = await apiClient.post('/guest-parking-rules/configure', rulesData);\n    return response.data;\n  } catch (error) {\n    console.error('Error configuring guest parking rules:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","isRefreshing","failedQueue","processQueue","error","token","forEach","prom","reject","resolve","setAuthToken","defaults","common","interceptors","response","use","originalRequest","config","status","_retry","Promise","push","then","catch","err","refreshToken","localStorage","getItem","post","accessToken","data","registerUser","userData","loginUser","credentials","getProperties","get","console","message","createProperty","propertyData","getResidents","getPropertiesByManager","log","getResidentsByProperties","propertyIds","createResident","residentData","getVehicles","addVehicle","vehicleData","updateVehicle","id","updatedData","put","deleteVehicle","delete","getParkingSpot","updateProfile","profileData","registerGuest","guestData","configureGuestParkingRules","rulesData"],"sources":["C:/Users/16823/Desktop/parking_management/parking-app-frontend/src/utils/api.js"],"sourcesContent":["// utils/api.js\r\nimport axios from 'axios';\r\n\r\n// Base URL for the backend API\r\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL if different\r\n\r\n// Create an Axios instance with the base URL\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nlet isRefreshing = false;\r\nlet failedQueue = [];\r\n\r\nconst processQueue = (error, token = null) => {\r\n  failedQueue.forEach((prom) => {\r\n    if (error) prom.reject(error);\r\n    else prom.resolve(token);\r\n  });\r\n  failedQueue = [];\r\n};\r\n\r\n/**\r\n * Function to set or clear the JWT token in the request headers.\r\n * @param {string|null} token - The JWT token to set, or null to clear it.\r\n */\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete apiClient.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      if (isRefreshing) {\r\n        return new Promise((resolve, reject) => {\r\n          failedQueue.push({ resolve, reject });\r\n        })\r\n          .then((token) => {\r\n            originalRequest.headers['Authorization'] = `Bearer ${token}`;\r\n            return apiClient(originalRequest);\r\n          })\r\n          .catch((err) => Promise.reject(err));\r\n      }\r\n\r\n      originalRequest._retry = true;\r\n      isRefreshing = true;\r\n\r\n      const refreshToken = localStorage.getItem('refreshToken'); // Retrieve refresh token\r\n      try {\r\n        const response = await axios.post(`${API_URL}/auth/refresh-token`, { refreshToken });\r\n        const { accessToken } = response.data;\r\n\r\n        setAuthToken(accessToken); // Update the access token globally\r\n        originalRequest.headers['Authorization'] = `Bearer ${accessToken}`;\r\n\r\n        processQueue(null, accessToken);\r\n        return apiClient(originalRequest);\r\n      } catch (err) {\r\n        processQueue(err, null);\r\n        return Promise.reject(err);\r\n      } finally {\r\n        isRefreshing = false;\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Auth APIs\r\n */\r\n// Register a new user\r\nexport const registerUser = async (userData) => {\r\n  const response = await apiClient.post('/auth/register', userData);\r\n  return response.data;\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (credentials) => {\r\n  const response = await apiClient.post('/auth/login', credentials);\r\n  return response.data; // Ensure this includes both `token` and `role`\r\n};\r\n\r\n/**\r\n * Property APIs\r\n */\r\n// Fetch properties (only accessible by property managers)\r\nexport const getProperties = async () => {\r\n  try {\r\n    const response = await apiClient.get('/properties');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching properties:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new property (only accessible by property managers)\r\nexport const createProperty = async (propertyData) => {\r\n  try {\r\n    const response = await apiClient.post('/properties', propertyData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating property:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Resident APIs\r\n */\r\n// Fetch residents (only accessible by property managers)\r\nexport const getResidents = async () => {\r\n  try {\r\n    const response = await apiClient.get('/residents');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(' api::getResidents() - Error fetching residents:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getPropertiesByManager = async () => {\r\n  try {\r\n    console.log('api::getPropertiesByManager(): Sending request to /properties/manager'); // Debugging line\r\n    const response = await apiClient.get('/properties/manager');\r\n    console.log('api::getPropertiesByManager(): Response from backend:', response.data); // Debugging line\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('api::getPropertiesByManager(): Error fetching properties:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getResidentsByProperties = async (propertyIds) => {\r\n  try {\r\n    const response = await apiClient.post('/residents/by-properties', { propertyIds });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('api::getResidentsByProperties() - Error fetching residents:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new resident (only accessible by property managers)\r\nexport const createResident = async (residentData) => {\r\n  try {\r\n    console.log('Sending resident data to backend:', residentData); // Debugging line\r\n    const response = await apiClient.post('/residents/residents', residentData); // Updated endpoint\r\n    console.log('Response from backend:', response.data); // Debugging line\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in createResident API call:', error.message); // Debugging line\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get resident's vehicles (only accessible by residents)\r\nexport const getVehicles = async () => {\r\n  try {\r\n    const response = await apiClient.get('/residents/vehicles');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching vehicles:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add a vehicle (only accessible by residents)\r\nexport const addVehicle = async (vehicleData) => {\r\n  try {\r\n    const response = await apiClient.post('/residents/vehicles', vehicleData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding vehicle:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a vehicle (only accessible by residents)\r\nexport const updateVehicle = async (id, updatedData) => {\r\n  try {\r\n    const response = await apiClient.put(`/residents/vehicles/${id}`, updatedData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating vehicle:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a vehicle (only accessible by residents)\r\nexport const deleteVehicle = async (id) => {\r\n  try {\r\n    const response = await apiClient.delete(`/residents/vehicles/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting vehicle:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get assigned parking spot (only accessible by residents)\r\nexport const getParkingSpot = async () => {\r\n  try {\r\n    const response = await apiClient.get('/residents/parking-spot');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching parking spot:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update resident profile (only accessible by residents)\r\nexport const updateProfile = async (profileData) => {\r\n  try {\r\n    const response = await apiClient.put('/residents/profile', profileData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating profile:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Guest APIs\r\n */\r\n// Register a guest\r\nexport const registerGuest = async (guestData) => {\r\n  try {\r\n    const response = await apiClient.post('/guests/register', guestData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error registering guest:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Guest Parking Rules APIs\r\n */\r\n// Configure guest parking rules for a property (only accessible by property managers)\r\nexport const configureGuestParkingRules = async (rulesData) => {\r\n  try {\r\n    const response = await apiClient.post('/guest-parking-rules/configure', rulesData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error configuring guest parking rules:', error.message);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}