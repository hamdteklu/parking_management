{"ast":null,"code":"// utils/api.js\nimport axios from 'axios';\n\n// Base URL for the backend API\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL if different\n\n// Create an Axios instance with the base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\r\n * Function to set or clear the JWT token in the request headers.\r\n * @param {string|null} token - The JWT token to set, or null to clear it.\r\n */\nexport const setAuthToken = token => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n};\n\n/**\r\n * Auth APIs\r\n */\n// Register a new user\nexport const registerUser = async userData => {\n  const response = await apiClient.post('/auth/register', userData);\n  return response.data;\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  const response = await apiClient.post('/auth/login', credentials);\n  return response.data; // Ensure this includes both `token` and `role`\n};\n\n/**\r\n * Property APIs\r\n */\n// Fetch properties (only accessible by property managers)\nexport const getProperties = async () => {\n  try {\n    const response = await apiClient.get('/properties');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching properties:', error.message);\n    throw error;\n  }\n};\n\n// Create a new property (only accessible by property managers)\nexport const createProperty = async propertyData => {\n  try {\n    const response = await apiClient.post('/properties', propertyData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating property:', error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Resident APIs\r\n */\n// Fetch residents (only accessible by property managers)\nexport const getResidents = async () => {\n  try {\n    const response = await apiClient.get('/residents');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching residents:', error.message);\n    throw error;\n  }\n};\n\n// Create a new resident (only accessible by property managers)\nexport const createResident = async residentData => {\n  try {\n    console.log('Sending resident data to backend:', residentData); // Debugging line\n    const response = await apiClient.post('/residents/residents', residentData); // Updated endpoint\n    console.log('Response from backend:', response.data); // Debugging line\n    return response.data;\n  } catch (error) {\n    console.error('Error in createResident API call:', error.message); // Debugging line\n    throw error;\n  }\n};\n\n// Get resident's vehicles (only accessible by residents)\nexport const getVehicles = async () => {\n  try {\n    const response = await apiClient.get('/residents/vehicles');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching vehicles:', error.message);\n    throw error;\n  }\n};\n\n// Add a vehicle (only accessible by residents)\nexport const addVehicle = async vehicleData => {\n  try {\n    const response = await apiClient.post('/residents/vehicles', vehicleData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding vehicle:', error.message);\n    throw error;\n  }\n};\n\n// Update a vehicle (only accessible by residents)\nexport const updateVehicle = async (id, updatedData) => {\n  try {\n    const response = await apiClient.put(`/residents/vehicles/${id}`, updatedData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating vehicle:', error.message);\n    throw error;\n  }\n};\n\n// Delete a vehicle (only accessible by residents)\nexport const deleteVehicle = async id => {\n  try {\n    const response = await apiClient.delete(`/residents/vehicles/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting vehicle:', error.message);\n    throw error;\n  }\n};\n\n// Get assigned parking spot (only accessible by residents)\nexport const getParkingSpot = async () => {\n  try {\n    const response = await apiClient.get('/residents/parking-spot');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching parking spot:', error.message);\n    throw error;\n  }\n};\n\n// Update resident profile (only accessible by residents)\nexport const updateProfile = async profileData => {\n  try {\n    const response = await apiClient.put('/residents/profile', profileData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating profile:', error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Guest APIs\r\n */\n// Register a guest\nexport const registerGuest = async guestData => {\n  try {\n    const response = await apiClient.post('/guests/register', guestData);\n    return response.data;\n  } catch (error) {\n    console.error('Error registering guest:', error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Guest Parking Rules APIs\r\n */\n// Configure guest parking rules for a property (only accessible by property managers)\nexport const configureGuestParkingRules = async rulesData => {\n  try {\n    const response = await apiClient.post('/guest-parking-rules/configure', rulesData);\n    return response.data;\n  } catch (error) {\n    console.error('Error configuring guest parking rules:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","setAuthToken","token","defaults","common","registerUser","userData","response","post","data","loginUser","credentials","getProperties","get","error","console","message","createProperty","propertyData","getResidents","createResident","residentData","log","getVehicles","addVehicle","vehicleData","updateVehicle","id","updatedData","put","deleteVehicle","delete","getParkingSpot","updateProfile","profileData","registerGuest","guestData","configureGuestParkingRules","rulesData"],"sources":["C:/Users/16823/Desktop/parking_management/parking-app-frontend/src/utils/api.js"],"sourcesContent":["// utils/api.js\r\nimport axios from 'axios';\r\n\r\n// Base URL for the backend API\r\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL if different\r\n\r\n// Create an Axios instance with the base URL\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n/**\r\n * Function to set or clear the JWT token in the request headers.\r\n * @param {string|null} token - The JWT token to set, or null to clear it.\r\n */\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete apiClient.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n/**\r\n * Auth APIs\r\n */\r\n// Register a new user\r\nexport const registerUser = async (userData) => {\r\n  const response = await apiClient.post('/auth/register', userData);\r\n  return response.data;\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (credentials) => {\r\n  const response = await apiClient.post('/auth/login', credentials);\r\n  return response.data; // Ensure this includes both `token` and `role`\r\n};\r\n\r\n/**\r\n * Property APIs\r\n */\r\n// Fetch properties (only accessible by property managers)\r\nexport const getProperties = async () => {\r\n  try {\r\n    const response = await apiClient.get('/properties');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching properties:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new property (only accessible by property managers)\r\nexport const createProperty = async (propertyData) => {\r\n  try {\r\n    const response = await apiClient.post('/properties', propertyData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating property:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Resident APIs\r\n */\r\n// Fetch residents (only accessible by property managers)\r\nexport const getResidents = async () => {\r\n  try {\r\n    const response = await apiClient.get('/residents');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching residents:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new resident (only accessible by property managers)\r\nexport const createResident = async (residentData) => {\r\n  try {\r\n    console.log('Sending resident data to backend:', residentData); // Debugging line\r\n    const response = await apiClient.post('/residents/residents', residentData); // Updated endpoint\r\n    console.log('Response from backend:', response.data); // Debugging line\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in createResident API call:', error.message); // Debugging line\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get resident's vehicles (only accessible by residents)\r\nexport const getVehicles = async () => {\r\n  try {\r\n    const response = await apiClient.get('/residents/vehicles');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching vehicles:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add a vehicle (only accessible by residents)\r\nexport const addVehicle = async (vehicleData) => {\r\n  try {\r\n    const response = await apiClient.post('/residents/vehicles', vehicleData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error adding vehicle:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a vehicle (only accessible by residents)\r\nexport const updateVehicle = async (id, updatedData) => {\r\n  try {\r\n    const response = await apiClient.put(`/residents/vehicles/${id}`, updatedData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating vehicle:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a vehicle (only accessible by residents)\r\nexport const deleteVehicle = async (id) => {\r\n  try {\r\n    const response = await apiClient.delete(`/residents/vehicles/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error deleting vehicle:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get assigned parking spot (only accessible by residents)\r\nexport const getParkingSpot = async () => {\r\n  try {\r\n    const response = await apiClient.get('/residents/parking-spot');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching parking spot:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update resident profile (only accessible by residents)\r\nexport const updateProfile = async (profileData) => {\r\n  try {\r\n    const response = await apiClient.put('/residents/profile', profileData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating profile:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Guest APIs\r\n */\r\n// Register a guest\r\nexport const registerGuest = async (guestData) => {\r\n  try {\r\n    const response = await apiClient.post('/guests/register', guestData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error registering guest:', error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Guest Parking Rules APIs\r\n */\r\n// Configure guest parking rules for a property (only accessible by property managers)\r\nexport const configureGuestParkingRules = async (rulesData) => {\r\n  try {\r\n    const response = await apiClient.post('/guest-parking-rules/configure', rulesData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error configuring guest parking rules:', error.message);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}