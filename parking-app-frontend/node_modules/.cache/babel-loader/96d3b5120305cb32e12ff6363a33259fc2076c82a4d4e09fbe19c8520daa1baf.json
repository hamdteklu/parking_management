{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the backend API\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL if different\n\n// Create an Axios instance with the base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\r\n * Function to set or clear the JWT token in the request headers.\r\n * @param {string|null} token - The JWT token to set, or null to clear it.\r\n */\nexport const setAuthToken = token => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n};\n\n/**\r\n * Auth APIs\r\n */\n\n// Register a new user\nexport const registerUser = async userData => {\n  const response = await apiClient.post('/auth/register', userData);\n  return response.data;\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  const response = await apiClient.post('/auth/login', credentials);\n  return response.data;\n};\n\n/**\r\n * Property APIs\r\n */\n\n// Fetch properties\nexport const getProperties = async () => {\n  const response = await apiClient.get('/properties');\n  return response.data;\n};\n\n// Create a new property\nexport const createProperty = async propertyData => {\n  const response = await apiClient.post('/properties', propertyData);\n  return response.data;\n};\n\n/**\r\n * Resident APIs\r\n */\n\n// Fetch residents\nexport const getResidents = async () => {\n  const response = await apiClient.get('/residents');\n  return response.data;\n};\nexport const getVehicles = async () => {\n  const response = await apiClient.get('/residents/vehicles');\n  return response.data;\n};\nexport const addVehicle = async vehicleData => {\n  const response = await apiClient.post('/residents/vehicles', vehicleData);\n  return response.data;\n};\nexport const updateVehicle = async (id, updatedData) => {\n  const response = await apiClient.put(`/residents/vehicles/${id}`, updatedData);\n  return response.data;\n};\nexport const deleteVehicle = async id => {\n  const response = await apiClient.delete(`/residents/vehicles/${id}`);\n  return response.data;\n};\nexport const getParkingSpot = async () => {\n  const response = await apiClient.get('/residents/parking-spot');\n  return response.data;\n};\nexport const updateProfile = async profileData => {\n  const response = await apiClient.put('/residents/profile', profileData);\n  return response.data;\n};\n\n/**\r\n * Guest APIs\r\n */\n\n// Register a guest\nexport const registerGuest = async guestData => {\n  const response = await apiClient.post('/guests/register', guestData);\n  return response.data;\n};","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","setAuthToken","token","defaults","common","registerUser","userData","response","post","data","loginUser","credentials","getProperties","get","createProperty","propertyData","getResidents","getVehicles","addVehicle","vehicleData","updateVehicle","id","updatedData","put","deleteVehicle","delete","getParkingSpot","updateProfile","profileData","registerGuest","guestData"],"sources":["C:/Users/16823/Desktop/parking_management/parking-app-frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base URL for the backend API\r\nconst API_URL = 'http://localhost:5000/api'; // Replace with your backend URL if different\r\n\r\n// Create an Axios instance with the base URL\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n/**\r\n * Function to set or clear the JWT token in the request headers.\r\n * @param {string|null} token - The JWT token to set, or null to clear it.\r\n */\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete apiClient.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n/**\r\n * Auth APIs\r\n */\r\n\r\n// Register a new user\r\nexport const registerUser = async (userData) => {\r\n  const response = await apiClient.post('/auth/register', userData);\r\n  return response.data;\r\n};\r\n\r\n// Login user\r\nexport const loginUser = async (credentials) => {\r\n  const response = await apiClient.post('/auth/login', credentials);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Property APIs\r\n */\r\n\r\n// Fetch properties\r\nexport const getProperties = async () => {\r\n  const response = await apiClient.get('/properties');\r\n  return response.data;\r\n};\r\n\r\n// Create a new property\r\nexport const createProperty = async (propertyData) => {\r\n  const response = await apiClient.post('/properties', propertyData);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Resident APIs\r\n */\r\n\r\n// Fetch residents\r\nexport const getResidents = async () => {\r\n  const response = await apiClient.get('/residents');\r\n  return response.data;\r\n};\r\n\r\nexport const getVehicles = async () => {\r\n  const response = await apiClient.get('/residents/vehicles');\r\n  return response.data;\r\n};\r\n\r\nexport const addVehicle = async (vehicleData) => {\r\n  const response = await apiClient.post('/residents/vehicles', vehicleData);\r\n  return response.data;\r\n};\r\n\r\nexport const updateVehicle = async (id, updatedData) => {\r\n  const response = await apiClient.put(`/residents/vehicles/${id}`, updatedData);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteVehicle = async (id) => {\r\n  const response = await apiClient.delete(`/residents/vehicles/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport const getParkingSpot = async () => {\r\n  const response = await apiClient.get('/residents/parking-spot');\r\n  return response.data;\r\n};\r\n\r\nexport const updateProfile = async (profileData) => {\r\n  const response = await apiClient.put('/residents/profile', profileData);\r\n  return response.data;\r\n};\r\n\r\n/**\r\n * Guest APIs\r\n */\r\n\r\n// Register a guest\r\nexport const registerGuest = async (guestData) => {\r\n  const response = await apiClient.post('/guests/register', guestData);\r\n  return response.data;\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACrC,IAAIA,KAAK,EAAE;IACTL,SAAS,CAACM,QAAQ,CAACH,OAAO,CAACI,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUF,KAAK,EAAE;EACxE,CAAC,MAAM;IACL,OAAOL,SAAS,CAACM,QAAQ,CAACH,OAAO,CAACI,MAAM,CAAC,eAAe,CAAC;EAC3D;AACF,CAAC;;AAED;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;EACjE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMJ,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAC,aAAa,EAAEG,WAAW,CAAC;EACjE,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;;AAEA;AACA,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAML,QAAQ,GAAG,MAAMV,SAAS,CAACgB,GAAG,CAAC,aAAa,CAAC;EACnD,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,MAAMR,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAC,aAAa,EAAEO,YAAY,CAAC;EAClE,OAAOR,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;;AAEA;AACA,OAAO,MAAMO,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,MAAMT,QAAQ,GAAG,MAAMV,SAAS,CAACgB,GAAG,CAAC,YAAY,CAAC;EAClD,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;EACrC,MAAMV,QAAQ,GAAG,MAAMV,SAAS,CAACgB,GAAG,CAAC,qBAAqB,CAAC;EAC3D,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMS,UAAU,GAAG,MAAOC,WAAW,IAAK;EAC/C,MAAMZ,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAC,qBAAqB,EAAEW,WAAW,CAAC;EACzE,OAAOZ,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMW,aAAa,GAAG,MAAAA,CAAOC,EAAE,EAAEC,WAAW,KAAK;EACtD,MAAMf,QAAQ,GAAG,MAAMV,SAAS,CAAC0B,GAAG,CAAC,uBAAuBF,EAAE,EAAE,EAAEC,WAAW,CAAC;EAC9E,OAAOf,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMe,aAAa,GAAG,MAAOH,EAAE,IAAK;EACzC,MAAMd,QAAQ,GAAG,MAAMV,SAAS,CAAC4B,MAAM,CAAC,uBAAuBJ,EAAE,EAAE,CAAC;EACpE,OAAOd,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMnB,QAAQ,GAAG,MAAMV,SAAS,CAACgB,GAAG,CAAC,yBAAyB,CAAC;EAC/D,OAAON,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMkB,aAAa,GAAG,MAAOC,WAAW,IAAK;EAClD,MAAMrB,QAAQ,GAAG,MAAMV,SAAS,CAAC0B,GAAG,CAAC,oBAAoB,EAAEK,WAAW,CAAC;EACvE,OAAOrB,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA;AACA;;AAEA;AACA,OAAO,MAAMoB,aAAa,GAAG,MAAOC,SAAS,IAAK;EAChD,MAAMvB,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAC,kBAAkB,EAAEsB,SAAS,CAAC;EACpE,OAAOvB,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}